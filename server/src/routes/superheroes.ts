import { Router, Request, Response, NextFunction } from "express";
import path from "path";
import {
  getAllSuperheroes,
  getSuperheroById,
  createSuperhero,
  updateSuperhero,
  deleteSuperhero,
  deleteHeroImage,
} from "../controllers/superheroController";
import { upload } from "../config/multer";
import { validateSuperhero } from "../middlewares/validateSuperhero";
import { validateFile } from "../middlewares/validateFile";

const router = Router();

const asyncHandler = (fn: any) => (req: Request, res: Response, next: NextFunction) =>
  Promise.resolve(fn(req, res, next)).catch(next);

// ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—É—Ç–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–º app —Ñ–∞–π–ª–µ, –∞ –Ω–µ –∑–¥–µ—Å—å
// router.use("/uploads", require("express").static("uploads"));

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø–µ—Ä–µ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏
router.get("/test-upload", async (req: Request, res: Response) => {
  res.json({
    message: "Upload endpoint is ready",
    upload_url: "/superheroes",
    max_files: 5,
    accepted_formats: ["jpg", "jpeg", "png", "webp"]
  });
});

router.get("/storage-status", async (req: Request, res: Response) => {
  res.json({
    storage: "local",
    upload_path: path.join(process.cwd(), "uploads", "superheroes"),
    status: "active"
  });
});

// –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
router.get("/", asyncHandler(getAllSuperheroes));

// ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏–¥—É—Ç –ø–æ—Å–ª–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö
router.get("/:id", asyncHandler(getSuperheroById));

router.post(
  "/",
  upload.array("images", 5),
  (req, res, next) => {
    console.log("üìÅ Files received:", req.files?.length || 0);
    console.log("üìù Body data:", Object.keys(req.body));
    next();
  },
  validateFile,
  validateSuperhero,
  asyncHandler(createSuperhero)
);

router.put(
  "/:id",
  upload.array("images", 5),
  (req, res, next) => {
    console.log(`üìÅ Update ${req.params.id}: Files received:`, req.files?.length || 0);
    next();
  },
  validateFile,
  validateSuperhero,
  asyncHandler(updateSuperhero)
);

router.delete("/:id", asyncHandler(deleteSuperhero));
router.delete("/:id/image/:publicId", asyncHandler(deleteHeroImage));

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
router.use((err: any, req: Request, res: Response, next: NextFunction) => {
  console.error("üö® SUPERHERO ROUTER ERROR:", err);
  
  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
  if (err.name === 'ValidationError') {
    return res.status(400).json({
      message: "Validation Error",
      errors: err.errors,
    });
  }
  
  if (err.name === 'CastError') {
    return res.status(400).json({
      message: "Invalid ID format",
      error: "The provided ID is not a valid MongoDB ObjectId",
    });
  }
  
  if (err.code === 11000) {
    return res.status(409).json({
      message: "Duplicate Error",
      error: "A superhero with this nickname already exists",
    });
  }
  
  // –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
  res.status(500).json({
    message: "Internal Server Error",
    error: process.env.NODE_ENV === 'development' ? err.message : "Something went wrong",
    stack: process.env.NODE_ENV === 'development' ? err.stack : undefined,
  });
});

export default router;